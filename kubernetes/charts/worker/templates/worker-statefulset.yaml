apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  name: {{ template "worker.fullname" . }}
  labels:
    name: {{ template "worker.fullname" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
spec:
  replicas: {{ .Values.replicas }}
  serviceName: {{ template "worker.fullname" . }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: {{ template "worker.fullname" . }}
  template:
    metadata:
      labels:
        name: {{ template "worker.fullname" . }}
      creationTimestamp: null
    spec:
      initContainers:
        - name: wait-for-vault-service
          image: busybox:1.28
          command: ['sh', '-c', 'until nslookup {{ .Release.Name }}-vault; do sleep 1.5; echo "Waiting for Vault to start..."; done']
        - name: wait-for-rabbitmq-service
          image: busybox:1.28
          command: ['sh', '-c', 'until nslookup {{ .Release.Name }}-rabbitmq; do sleep 1.5; echo "Waiting for RabbitMQ to start..."; done']
      containers:
        - env:
            - name: VAULT_ADDRESS
              value: https://{{ .Release.Name }}-vault
            - name: FLOWER_ADDRESS
              value: https://{{ .Release.Name }}-flower
            - name: RABBITMQ_ADDRESS
              value: {{ .Release.Name }}-rabbitmq:{{ .Values.rabbitmq.port }}
            - name: VAULT_ROLE
              value: {{ .Values.vault.vaultRole }}
            - name: C_FORCE_ROOT
              value: "true"
          volumeMounts:
            - mountPath: /var/run/rmq-tls
              name: {{ template "worker.fullname" . }}-rmq-tls
              readOnly: true
          image: {{ .Values.imageName }}:{{ .Values.imageVersion }}
          command:
            - celery
            - worker
            - -A
            - tasks
          name: {{ template "worker.fullname" .}}
          {{ if eq .Values.livenessProbe.enabled "true" }}
          livenessProbe:
            exec:
              command:
                - python
                - -c
                - "import os;from celery.task.control import inspect;from tasks import celery;exit(0 if os.environ['HOSTNAME'] in ','.join(inspect(app=celery).stats().keys()) else 1)"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelay }}
            periodSeconds: {{ .Values.livenessProbe.interval }}
          {{ end }}
      restartPolicy: Always
      serviceAccountName: {{ template "worker.fullname" . }}-serviceaccount
      imagePullSecrets:
        - name: gcp-registry
      volumes:
        - name: {{ template "worker.fullname" . }}-rmq-tls
          secret:
            secretName: {{ .Release.Name }}-rabbitmq-client-tls